{"version":3,"sources":["components/ContactForm/ContactForm.module.css","views/ContactsView.module.css","components/ContactList/ContactList.module.css","components/ContactFilter/ContactFilter.module.css","components/App.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducer.js","components/ContactList/ContactList.jsx","components/ContactFilter/ContactFilter.jsx","views/ContacsView.js","components/App.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","contactRemoveRequest","contactRemoveSuccess","contactRemoveError","changeFilter","axios","defaults","baseURL","name","number","dispatch","contact","post","then","data","catch","error","contactId","delete","a","get","initionalState","ContactForm","state","changeFormHandler","target","value","setState","console","log","props","submitFormHandler","event","preventDefault","onAdd","validateForm","resetForm","contacts","alert","isUnique","find","this","className","styles","form","onSubmit","input","type","placeholder","onChange","btn","Component","connect","items","contactsOperations","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","toLowerCase","includes","createReducer","_","payload","id","combineReducers","ContactItem","onRemove","listItem","onClick","contactsSelectors","length","map","e","contactsActions","ContactsView","fetchContacts","wrapper","title","ContactFilter","isLoadingContacts","App","to","path","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a2c146b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3ALwH\",\"input\":\"ContactForm_input__3TGcF\",\"btn\":\"ContactForm_btn__Vmc7y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactsView_wrapper__wMw-S\",\"title\":\"ContactsView_title__2g0BL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactList_listItem__3__xg\",\"btn\":\"ContactList_btn__1zvQh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactFilter_input__3l4Sr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__29Igf\"};","// import actionTypes from './contacts-types';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// const contactsAdd = createAction('contacts/add', (name, number) => ({\r\n//   payload: { id: uuid(), name, number },\r\n// }));\r\n// const contactsAdd = (name, number) => ({\r\n//   type: actionTypes.CONTACTS_ADD,\r\n//   payload: { id: uuid(), name, number },\r\n// });\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\nexport const contactRemoveRequest = createAction(\r\n  'contacts/contactRemoveRequest',\r\n);\r\nexport const contactRemoveSuccess = createAction(\r\n  'contacts/contactRemoveSuccess',\r\n);\r\nexport const contactRemoveError = createAction('contacts/contactRemoveError');\r\n// export const contactRemove = createAction('contacts/remove');\r\n// const contactRemove = id => ({\r\n//   type: actionTypes.CONTACTS_REMOVE,\r\n//   payload: id,\r\n// });\r\nexport const changeFilter = createAction('contacts/filter');\r\n// const changeFilter = value => ({\r\n//   type: actionTypes.CONTACTS_FILTER,\r\n//   payload: value,\r\n// });\r\n// export default {\r\n//   addContactRequest,\r\n//   addContactSuccess,\r\n//   addContactError,\r\n//   contactRemove,\r\n//   changeFilter,\r\n// };\r\n","import axios from 'axios';\r\nimport {\r\n  addContactSuccess,\r\n  addContactRequest,\r\n  addContactError,\r\n  contactRemoveRequest,\r\n  contactRemoveSuccess,\r\n  contactRemoveError,\r\n  fetchContactSuccess,\r\n  fetchContactRequest,\r\n  fetchContactError,\r\n} from './contacts-actions';\r\nconst baseURL = 'http://localhost:4040';\r\naxios.defaults.baseURL = baseURL;\r\n\r\n// const fetchContacts = () => dispatch => {\r\n//   dispatch(fetchContactRequest());\r\n//   axios\r\n//     .get('/contacts')\r\n//     .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n//     .catch(error => dispatch(fetchContactError(error)));\r\n// };\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\nconst contactsAdd = (name, number) => dispatch => {\r\n  const contact = { name, number };\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst contactRemove = contactId => dispatch => {\r\n  dispatch(contactRemoveRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(contactRemoveSuccess(contactId)))\r\n    .catch(error => dispatch(contactRemoveError(error)));\r\n};\r\nexport default { contactsAdd, contactRemove, fetchContacts };\r\n","import { Component } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport styles from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nconst initionalState = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  state = initionalState;\r\n  changeFormHandler = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n    console.log(this.props);\r\n  };\r\n\r\n  submitFormHandler = event => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { onAdd } = this.props;\r\n\r\n    const isValidForm = this.validateForm();\r\n    if (!isValidForm) return;\r\n\r\n    onAdd(name, number);\r\n    this.resetForm();\r\n  };\r\n\r\n  validateForm = () => {\r\n    const { name, number } = this.state;\r\n    const { contacts } = this.props;\r\n    if (!name || !number) {\r\n      alert('Fill in all fields');\r\n      return false;\r\n    }\r\n    const isUnique = contacts.find(contact => contact.name === name);\r\n    isUnique && alert('Contact is alredy in cotactList');\r\n    return !isUnique;\r\n  };\r\n\r\n  resetForm = () => this.setState(initionalState);\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className={styles.form} onSubmit={this.submitFormHandler}>\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Enter name\"\r\n          value={name}\r\n          onChange={this.changeFormHandler}\r\n        />\r\n        <input\r\n          className={styles.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          placeholder=\"Enter phone number\"\r\n          value={number}\r\n          onChange={this.changeFormHandler}\r\n        />\r\n        <button className={styles.btn} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({ contacts: state.contacts.items });\r\nconst mapDispatchToProps = dispatch => ({\r\n  onAdd: (name, number) =>\r\n    dispatch(contactsOperations.contactsAdd(name, number)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nconst getLoading = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getAllContacts = state => state.contacts.items;\r\n// const getVisibleContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase.includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase.includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\nexport default { getLoading, getFilter, getVisibleContacts };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import actionTypes from './contacts-types';\r\nimport {\r\n  addContactSuccess,\r\n  addContactRequest,\r\n  addContactError,\r\n  contactRemoveSuccess,\r\n  contactRemoveRequest,\r\n  contactRemoveError,\r\n  fetchContactSuccess,\r\n  fetchContactRequest,\r\n  fetchContactError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [contactRemoveSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionTypes.CONTACTS_ADD:\r\n//       return [...state, payload];\r\n\r\n//     case actionTypes.CONTACTS_REMOVE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [contactRemoveRequest]: () => true,\r\n  [contactRemoveSuccess]: () => false,\r\n  [contactRemoveError]: () => false,\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n});\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (state, { payload }) => payload,\r\n});\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionTypes.CONTACTS_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({ items, filter, loading });\r\n\r\n// filter: filterReducer,\r\n// items: itemsReducer,\r\n","import PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\nimport { connect } from 'react-redux';\r\n// import contactsOperations from '../../redux/contacts/contacts-operations';\r\n// import contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nconst ContactItem = ({ id, name, number, onRemove }) => {\r\n  return (\r\n    <li className={styles.listItem} key={id}>\r\n      {name}: {number}{' '}\r\n      <button className={styles.btn} onClick={() => onRemove(id)}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst ContactList = ({ contacts, onRemove }) => {\r\n  if (contacts.length === 0) return null;\r\n  return (\r\n    <ul>\r\n      {contacts.map(contact => (\r\n        <ContactItem {...contact} onRemove={onRemove} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\n// ContactItem.propTypes = {\r\n//   id: PropTypes.string.isRequired,\r\n//   name: PropTypes.string.isRequired,\r\n//   number: PropTypes.string,\r\n//   onRemove: PropTypes.func,\r\n// };\r\n\r\n// getFilteredContacts = () => {\r\n//   const { contacts, filter } = this.state;\r\n//   return contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n\r\n// const mapStateToProps = state => {\r\n//   const { items, filter } = state.contacts;\r\n//   const normalisedFilter = filter.toLowerCase;\r\n//   const visibleContacts = items.filter(({ text }) =>\r\n//     text.toLowerCase().includes(normalisedFilter),\r\n//   );\r\n//   // return { contacts: state.contacts.items };\r\n//   return {\r\n//     contacts: visibleContacts,\r\n//   };\r\n// };\r\n// const getVisibleContacts = (allContacts, filter) => {\r\n//   // const normalisedFilter = filter.toLowerCase();\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//   contacts: getVisibleContacts(items, filter),\r\n// });\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n\r\n  // const visibleContacts = items.filter(({ name }) =>\r\n  //   name.toLowerCase.includes(filter.toLowerCase()),\r\n  // );\r\n  // const { items, filter } = state.contacts;\r\n  // return {\r\n  //   contacts: items.filter(({ name }) => name.includes(filter.toLowerCase())),\r\n  // };\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onRemove: id => dispatch(contactsOperations.contactRemove(id)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import PropTypes from 'prop-types';\r\nimport styles from './ContactFilter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nconst Filter = ({ filter, onChange }) => (\r\n  <input\r\n    className={styles.input}\r\n    type=\"text\"\r\n    name=\"filter\"\r\n    value={filter}\r\n    // onChange={({ target }) => onChange(target.value)}\r\n    onChange={onChange}\r\n    placeholder=\"Search contact\"\r\n  />\r\n);\r\n\r\n// Filter.propTypes = {\r\n//   filter: PropTypes.string.isRequired,\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\nconst mapStateToProps = state => ({\r\n  filter: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport ContactForm from '../components/ContactForm';\r\nimport ContactList from '../components/ContactList';\r\nimport ContactFilter from '../components/ContactFilter';\r\nimport styles from './ContactsView.module.css';\r\nimport { connect } from 'react-redux';\r\n// import contactsOperations from '../redux/contacts/contacts-operations';\r\n// import contactsSelectors from '../redux/contacts/contacts-selectors';\r\nimport { contactsOperations, contactsSelectors } from '../redux/contacts';\r\n// function App({ items, filter, onAdd, onRemove }) {\r\nclass ContactsView extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <h2 className={styles.title}>Phonebook</h2>\r\n        <ContactForm\r\n        // onAdd={this.contactsAddHandler}\r\n        // uniqueCheck={this.checkContactUnique}\r\n        />\r\n        <h2 className={styles.title}>Contact List</h2>\r\n        <ContactFilter />\r\n        {this.props.isLoadingContacts && <h1>Loading... </h1>}\r\n        <ContactList\r\n        // contacts={visibleContact}\r\n        // onRemove={this.handleRemoveContact}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\r\n","// // import { Component } from 'react';\n// import React, { Component } from 'react';\n// import ContactForm from './ContactForm';\n// import ContactList from './ContactList';\n// import ContactFilter from './ContactFilter';\n// import styles from './App.module.css';\n// import { connect } from 'react-redux';\n// import contactsOperations from '../redux/contacts/contacts-operations';\n\n// // function App({ items, filter, onAdd, onRemove }) {\n// class App extends Component {\n//   componentDidMount() {\n//     this.props.fetchContacts();\n//   }\n//   render() {\n//     return (\n//       <div className={styles.wrapper}>\n//         <h2 className={styles.title}>Phonebook</h2>\n//         <ContactForm\n//         // onAdd={this.contactsAddHandler}\n//         // uniqueCheck={this.checkContactUnique}\n//         />\n//         <h2 className={styles.title}>Contact List</h2>\n//         <ContactFilter />\n//         {this.props.isLoadingContacts && <h1>Loading... </h1>}\n//         <ContactList\n//         // contacts={visibleContact}\n//         // onRemove={this.handleRemoveContact}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// // const mapStateToProps = state => {\n// //   return {\n// //     items: state.items,\n// //     filter: state.filter,\n// //   };\n// // };\n// // const mapDispatchToProps = dispatch => {\n// //   return {\n// //     onAdd: value => dispatch(contactsOperations.contactsAdd(value)),\n// //     onRemove: value => dispatch(contactsOperations.contactsRemove(value)),\n// //   };\n// // };\n// // export default connect(mapStateToProps, mapDispatchToProps)(App);\n// const mapStateToProps = state => ({\n//   isLoadingContacts: state.contacts.loading,\n// });\n// const mapDispatchToProps = dispatch => ({\n//   fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n// // class App extends Component {}\n// // state = {\n// //   contacts: [\n// //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n// //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n// //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n// //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// //   ],\n// //   filter: '',\n// // };\n\n// // contactsAddHandler = newContact => {\n// //   this.setState(({ contacts }) => ({ contacts: [...contacts, newContact] }));\n// // };\n// // checkContactUnique = name => {\n// //   const { contacts } = this.state;\n// //   const isUnique = !!contacts.find(contact => contact.name === name);\n// //   isUnique && alert('Contact is alredy in cotactList');\n// //   return !isUnique;\n// // };\n\n// // handleRemoveContact = id =>\n// //   this.setState(({ contacts }) => ({\n// //     contacts: contacts.filter(contact => contact.id !== id),\n// //   }));\n\n// // filterContactFilter = filter => this.setState({ filter });\n\n// // getFilteredContacts = () => {\n// //   const { contacts, filter } = this.state;\n// //   return contacts.filter(contact =>\n// //     contact.name.toLowerCase().includes(filter.toLowerCase()),\n// //   );\n// // };\n\n// //   render() {\n// //     // const { filter } = this.state;\n// //     // const visibleContact = this.getFilteredContacts();\n// //     return (\n\n// //     );\n// //   }\n\n// // export default App;\nimport React from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport ContactsView from '../views/ContacsView';\nimport styles from './App.module.css';\n\nconst App = () => (\n  <>\n    <ul>\n      <li className={styles.title}>\n        <Link to=\"/contacts\">Contacts</Link>\n      </li>\n    </ul>\n\n    <Switch>\n      <Route path=\"/contacts\">\n        <ContactsView />\n      </Route>\n    </Switch>\n  </>\n);\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport { contactsReducer } from './contacts';\r\nimport {\r\n  persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\n// const myMiddleware = store => next => action => {\r\n//   console.log('My middleware');\r\n// };\r\n// function myMiddleware(store) {\r\n//   return function (next) {\r\n//     return function (action) {\r\n//       func_bodY\r\n//     };\r\n//   };\r\n// }\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  // myMiddleware,\r\n  logger,\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer: { contacts: contactsReducer },\r\n\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n// export const persistor = persistStore(store);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport './base.css';\nimport './reset.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}